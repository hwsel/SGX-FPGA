/*

Copyright 2018 Intel Corporation

This software and the related documents are Intel copyrighted materials,
and your use of them is governed by the express license under which they
were provided to you (License). Unless the License provides otherwise,
you may not use, modify, copy, publish, distribute, disclose or transmit
this software or the related documents without Intel's prior written
permission.

This software and the related documents are provided as is, with no
express or implied warranties, other than those that are expressly stated
in the License.

*/

#ifndef _WIN32
#include "config.h"
#endif

enclave {
	include "sgx_trts.h"
	include "sgx_utils.h"
	include "sgx_tkey_exchange.h"
	include "sgx_dh.h"
	include "sgx_report.h"
	include "sgx_eid.h"
	include "sgx_ecp_types.h"
	include "sgx_tseal.h"

	from "sgx_tkey_exchange.edl" import *;

	trusted {
#ifndef _WIN32
		include "config.h"
#endif

		public sgx_status_t get_report([out] sgx_report_t *report,
			[in] sgx_target_info_t *target_info);

		public sgx_status_t enclave_ra_init(sgx_ec256_public_t key, int b_pse,
			[out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);

		public sgx_status_t enclave_ra_init_def(int b_pse,
			[out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);

		public sgx_status_t enclave_ra_get_key_hash(
			[out] sgx_status_t *get_keys_status, sgx_ra_context_t ctx,
			sgx_ra_key_type_t type, [out] sgx_sha256_hash_t *hash);

		public sgx_status_t enclave_ra_close(sgx_ra_context_t ctx);

		public uint32_t generate_decrypted_message([in, size = data_size] uint8_t* data_encrypted, size_t data_size, 
		size_t data_size_out, [out, size = data_size_out] uint8_t* data_plain);

		public uint32_t generate_encrypt_to_fpga_message( [in, size = len]uint8_t *MessageIn, size_t len, 
		[out, size = lenOut]uint8_t *encMessageOut, size_t lenOut);

		public uint32_t generate_encrypt_to_app_message( [in, size = len]uint8_t *MessageIn, size_t len, 
		[out, size = lenOut]uint8_t *encMessageOut, size_t lenOut);

		public uint32_t  rsa_encryption([in, size = input_len]uint8_t* input, uint32_t input_len, 
		[out, size = output_len]uint8_t* output, uint32_t output_len);

		public uint32_t  rsa_decryption([in, size = input_len]uint8_t* input, uint32_t input_len, 
		[out, size = output_len]uint8_t* output, uint32_t output_len);

		public uint32_t get_fpga_key([in, size = input_len]uint8_t* input, uint32_t input_len);

		public uint32_t send_auth_to_fpga([out, size = auth_len]int* auth, size_t auth_len);

		public uint32_t verify_auth_from_fpga([in, size = auth_len]int* auth, size_t auth_len);

	};

	untrusted {

		include "config.h"

		void emit_debug([in, size=data_size] const uint8_t *str, size_t data_size);
		//uint32_t dh_session_request_ocall(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id, [out]sgx_dh_msg1_t* dh_msg1, [out]uint32_t* session_id);
		//uint32_t dh_exchange_report_ocall(sgx_enclave_id_t src_enclave_id, sgx_enclave_id_t dest_enclave_id, [out]sgx_dh_msg2_t *dh_msg2, [in]sgx_dh_msg3_t *dh_msg3, uint32_t session_id);
	};
};

