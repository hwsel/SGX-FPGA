/*

Copyright 2018 Intel Corporation

This software and the related documents are Intel copyrighted materials,
and your use of them is governed by the express license under which they
were provided to you (License). Unless the License provides otherwise,
you may not use, modify, copy, publish, distribute, disclose or transmit
this software or the related documents without Intel's prior written
permission.

This software and the related documents are provided as is, with no
express or implied warranties, other than those that are expressly stated
in the License.

*/

#ifndef _WIN32
#include "config.h"
#endif

enclave {
	include "sgx_trts.h"
	include "sgx_utils.h"
	include "sgx_tkey_exchange.h"

	from "sgx_tkey_exchange.edl" import *;

	trusted {
#ifndef _WIN32
		include "config.h"
#endif

		public sgx_status_t get_report([out] sgx_report_t *report,
			[in] sgx_target_info_t *target_info);

		public sgx_status_t enclave_ra_init(sgx_ec256_public_t key, int b_pse,
			[out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);

		public sgx_status_t enclave_ra_init_def(int b_pse,
			[out] sgx_ra_context_t *ctx, [out] sgx_status_t *pse_status);

		public sgx_status_t enclave_ra_get_key_hash(
			[out] sgx_status_t *get_keys_status, sgx_ra_context_t ctx,
			sgx_ra_key_type_t type, [out] sgx_sha256_hash_t *hash);

		public sgx_status_t enclave_ra_close(sgx_ra_context_t ctx);
		
		public uint32_t generate_encrypted_message([in, size = data_size] uint8_t* data_plain, size_t data_size, 
		[out, size = data_size_out] uint8_t* data_encrypted, size_t data_size_out, int flag);

		public uint32_t generate_decrypted_message([in, size = data_size] uint8_t* data_encrypted, size_t data_size, 
		size_t data_size_out, [out, size = data_size_out] uint8_t* data_plain);

		public uint32_t send_encrypetd_message_to_enclave([in, size = data_size]uint8_t* data_encrypted, size_t data_size);

		public uint32_t generate_plain_message([in, size = data_size]uint8_t* plain_message, size_t data_size);

		public uint32_t send_plain_message_to_enclave([in, size = data_size]uint8_t* plain_message, size_t data_size);


	};

	untrusted {
	#ifndef _WIN32
			include "config.h"
	#endif

		void emit_debug([in, size=data_size] const uint8_t *str, size_t data_size);
	};
};


